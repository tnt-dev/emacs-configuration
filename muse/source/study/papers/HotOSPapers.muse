#title 阅读笔记 - HotOS

* HotOS '07

#vmmdetection

** Compatibility is Not Transparency: VMM Detection Myths and Realities
斯坦福、VMWare、UBX/XenSource、卡内基梅隆合作

主要讲了要实现一个完全透明的VMM(Virtual Machine Monitor)是基本不可能的。
从以下几个方面论述：
*** CPU差异
比如sidt指令，模拟出来的MMU架构等，都和真机下的表现有一定的差别。

*** 片外差异
现代芯片组都很难模拟出来，VMWare为了简化把所以的芯片组都模拟成i440bx，于是虚拟机的硬件配置会很荒谬。
另外I/O虚拟化也很难，基本上要维护一个庞大的模拟各种型号的硬件的驱动库是不可能的。通过这个问题完全可以检测到VMM。
还有就是利用device pass through的设备的DMA，访问物理内存进行探测，当然这个在IOMMU组件推出后就行不通了。

*** 资源差异
比如我写一个程序先占满TLB，然后执行一些在虚拟机中会导致VMM工作的指令，如果有VMM存在的话一部分TLB就会被占用，等控制权回到guest os上我就能探测到这个差异。另外虚拟机也不至于去模拟一个TLB的行为，否则产生的性能差距。。。残念

*** 用时差异
page faults的不一致等时间上的真机与虚拟机的差异也很容易检测到。
另外我可以写两个程序，一个跑1000000遍NOP，另一个跑1000000遍CPUID，求它们的所花时间比例。

真机上 CPUID : NOP 这个比例肯定比虚拟机上的小不少，因为NOP不会被VMM截获，但是CPUID会，会花更多的时间。
计时的时候可以借助NTP服务器，或者干脆用秒表 -_-b

*** VMBR
最后作者还提到了VMBR："Why bother?"
所谓的VMBR其实大大降低了反病毒的难度，传统的病毒还是很难检测的，但是VMBR病毒你只要用上述任何一种方法检测下即可。
