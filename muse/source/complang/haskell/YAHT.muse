#title Yet Another Haskell Tutorial 阅读笔记

* 习题记录
** Chapter 3
<src lang="haskell">
module Ex3
    where

import IO
    
fib 1 = 1
fib 2 = 1
fib n = fib (n - 1) + fib (n - 2)

mult 0 b = 0
mult a b = b + mult (a - 1) b

my_map func [] = []
my_map func (x:xs) = (func x) : (my_map func xs)

ex3_10 = do
  hSetBuffering stdin LineBuffering
  numbers <- getNumber
  let sum = show (foldr (+) 0 numbers)
      product = foldr (*) 1 numbers
  putStrLn "The sum is " ++ sum
  putStrLn "The product is " -- ++ show product

getNumber = do
  putStrLn "Give me a number (or 0 to stop):"
  num <- getLine
  if read num == 0
     then return []
     else do
       rest <- getNumber
       return (read num : rest)
</src>
