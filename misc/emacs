(setq load-path (cons "~/" load-path))
(setq load-path (cons "~/emacs" load-path))
(setq load-path (cons "~/emacs/utils" load-path))

;; Common settings

;; I'm used to marking regions by C-2
(global-set-key (kbd "C-2") 'set-mark-command)

(setq backup-directory-alist '(("" . "~/.emacs.d/.backups")))

;; Highlight FIXME, TODO and BUG
(font-lock-add-keywords nil
			'(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))

;; Select configuration depending on system, since I need few extension under Windows
(cond ((string-equal system-type "windows-nt")
       (load "sys-windows.el"))
      (t (load "sys-linux.el")))

;; Alternative for show-paren-mode
(require 'mic-paren)
(paren-activate)

;; Syntax highlight
(global-font-lock-mode t)

;; Bookmark
(setq 
 bookmark-default-file "~/.emacs.d/bookmarks" ;; keep my ~/ clean
 bookmark-save-flag 1)                        ;; autosave each change)

;; Color theme
(setq load-path (cons "~/emacs/utils/color-themes" load-path))
(require 'color-theme)
(load "color-theme-tango.el")

(defun color-theme-wyx ()
  (interactive)
  (color-theme-install
   '(color-theme-wyx
      ((background-color . "#101e2e")
      (background-mode . light)
      (border-color . "#1a1a1a")
      (cursor-color . "#fce94f")
      (foreground-color . "#eeeeec")
      (mouse-color . "black"))
     (fringe ((t (:background "#1a1a1a"))))
     (mode-line ((t (:foreground "#eeeeec" :background "#729fcf"))))
     (region ((t (:background "#0d4519"))))
     (font-lock-builtin-face ((t (:foreground "#729fcf"))))
     (font-lock-comment-face ((t (:foreground "#888a85"))))
     (font-lock-function-name-face ((t (:foreground "#edd400"))))
     (font-lock-keyword-face ((t (:foreground "#729fcf"))))
     (font-lock-string-face ((t (:foreground "#ad7fa8"))))
     (font-lock-type-face ((t (:foreground"#8ae234"))))
     (font-lock-variable-name-face ((t (:foreground "#eeeeec"))))
     (minibuffer-prompt ((t (:foreground "#729fcf" :bold t))))
     (font-lock-warning-face ((t (:foreground "Red" :bold t))))
     )))
(provide 'color-theme-wyx)

(color-theme-wyx)

;; TODO: Clean up this mess
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(emms-lyrics-display-on-minibuffer nil)
 '(emms-lyrics-display-on-modeline t)
 '(muse-html-charset-default "utf-8")
 '(muse-html-encoding-default (quote utf-8))
 '(muse-html-meta-content-encoding (quote utf-8))
 '(org-agenda-files nil t)
 '(quack-fontify-style (quote emacs))
 '(safe-local-variable-values (quote ((c-set-style . "BSD") (innamespace . 0) (access-label . /) (statement-case-intro . +) (statement-case-open . +) (case-label . +) (label . /) (statement-cont \, (when (fboundp (quote c-no-indent-after-java-annotations)) (quote c-no-indent-after-java-annotations)) \, (when (fboundp (quote c-lineup-assignments)) (quote c-lineup-assignments)) ++) (substatement-open . 0) (inline-open . 0) (block-open . 0) (topmost-intro . 0) (arglist-close . c-lineup-arglist) (comment-intro . 0) (inher-intro . ++) (member-init-intro . ++) (func-decl-cont . ++) (c-offsets-alist (arglist-intro google-c-lineup-expression-plus-4) (func-decl-cont . ++) (member-init-intro . ++) (inher-intro . ++) (comment-intro . 0) (arglist-close . c-lineup-arglist) (topmost-intro . 0) (block-open . 0) (inline-open . 0) (substatement-open . 0) (statement-cont \, (when (fboundp (quote c-no-indent-after-java-annotations)) (quote c-no-indent-after-java-annotations)) \, (when (fboundp (quote c-lineup-assignments)) (quote c-lineup-assignments)) ++) (label . /) (case-label . +) (statement-case-open . +) (statement-case-intro . +) (access-label . /) (innamespace . 0)) (c-cleanup-list brace-else-brace brace-elseif-brace brace-catch-brace empty-defun-braces defun-close-semi list-close-comma scope-operator) (c-indent-comments-syntactically-p) (c-hanging-semi&comma-criteria c-semi&comma-no-newlines-for-oneline-inliners c-semi&comma-inside-parenlist c-semi&comma-no-newlines-before-nonblanks) (c-hanging-colons-alist (case-label) (label after) (access-label after) (member-init-intro before) (inher-intro)) (c-hanging-braces-alist (defun-open after) (defun-close before after) (class-open after) (class-close before after) (namespace-open after) (inline-open after) (inline-close before after) (block-open after) (block-close . c-snug-do-while) (extern-lang-open after) (extern-lang-close after) (statement-case-open after) (substatement-open after)) (c-comment-only-line-offset . 0) (c-enable-xemacs-performance-kludge-p . t) (c-recognize-knr-p))))
 '(scheme-program-name "mit-scheme")
 '(speedbar-frame-parameters (quote ((minibuffer) (width . 20) (border-width . 0) (menu-bar-lines . 0) (tool-bar-lines . 0) (unsplittable . t) (set-background-color "black")))))

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(background "blue")
 '(cscope-file-face ((((class color) (background light)) (:foreground "yellow"))))
 '(cscope-function-face ((((class color) (background light)) (:foreground "#6699bf"))))
 '(cscope-line-face ((((class color) (background light)) (:foreground "#30b853"))))
 '(diff-header ((((class color) (min-colors 88) (background light)) (:background "#009999"))))
 '(font-lock-builtin-face ((((class color) (background dark)) (:foreground "Turquoise"))))
 '(font-lock-comment-face ((t (:foreground "MediumAquamarine"))))
 '(font-lock-constant-face ((((class color) (background dark)) (:bold t :foreground "DarkOrchid"))))
 '(font-lock-doc-string-face ((t (:foreground "green2"))))
 '(font-lock-function-name-face ((t (:foreground "SkyBlue"))))
 '(font-lock-keyword-face ((t (:bold t :foreground "CornflowerBlue"))))
 '(font-lock-preprocessor-face ((t (:italic nil :foreground "CornFlowerBlue"))))
 '(font-lock-reference-face ((t (:foreground "DodgerBlue"))))
 '(font-lock-string-face ((t (:foreground "LimeGreen"))))
 '(font-lock-type-face ((t (:foreground "#9290ff"))))
 '(font-lock-variable-name-face ((t (:foreground "PaleGreen"))))
 '(font-lock-warning-face ((((class color) (background dark)) (:foreground "yellow" :background "red"))))
 '(header-line ((default (:inherit mode-line)) (((class color grayscale) (background light)) (:background "#102e3e" :foreground "grey90" :box nil))))
 '(highlight ((t (:background "CornflowerBlue"))))
 '(jabber-roster-user-online ((t (:foreground "yellow" :slant normal :weight bold))))
 '(list-mode-item-selected ((t (:background "gold"))))
 '(makefile-space-face ((t (:background "wheat"))))
 '(mode-line ((t (:background "Navy"))))
 '(muse-link ((t (:foreground "yellow" :underline "yellow" :weight bold))))
 '(paren-match ((t (:background "darkseagreen4"))))
 '(region ((t (:background "DarkSlateBlue"))))
 '(semantic-decoration-on-unparsed-includes ((((class color) (background light)) (:background "#101ece"))))
 '(semantic-highlight-func-current-tag-face ((((class color) (background light)) (:background "#1a6699"))))
 '(semantic-tag-boundary-face ((((class color) (background light)) (:overline "#009999"))))
 '(show-paren-match ((t (:foreground "black" :background "wheat"))))
 '(show-paren-mismatch ((((class color)) (:foreground "white" :background "red"))))
 '(speedbar-button-face ((((class color) (background dark)) (:foreground "green4"))))
 '(speedbar-directory-face ((((class color) (background dark)) (:foreground "khaki"))))
 '(speedbar-file-face ((((class color) (background dark)) (:foreground "cyan"))))
 '(speedbar-tag-face ((((class color) (background dark)) (:foreground "Springgreen"))))
 '(vhdl-speedbar-architecture-selected-face ((((class color) (background dark)) (:underline t :foreground "Blue"))))
 '(vhdl-speedbar-entity-face ((((class color) (background dark)) (:foreground "darkGreen"))))
 '(vhdl-speedbar-entity-selected-face ((((class color) (background dark)) (:underline t :foreground "darkGreen"))))
 '(vhdl-speedbar-package-face ((((class color) (background dark)) (:foreground "black"))))
 '(vhdl-speedbar-package-selected-face ((((class color) (background dark)) (:underline t :foreground "black"))))
 '(widget-field ((((class grayscale color) (background light)) (:background "DarkBlue")))))
