(add-to-list 'load-path "~/emacs/load")

;;; muse-init.el --- My muse configuration
;; (load "muse-bbs.el")


(require 'muse)
(require 'muse-mode)
(require 'muse-html)
(require 'muse-latex)
(require 'muse-texinfo)
(require 'muse-docbook)
; (require 'muse-colors)
(require 'muse-wiki)
(require 'outline)
(require 'htmlize)
; (require 'tp-muse-highlight nil t)

(custom-set-variables
 '(muse-html-meta-content-encoding (quote utf-8))
 '(muse-html-charset-default "utf-8")
 '(muse-html-encoding-default (quote utf-8))
)

(setq htmlize-output-type 'css)

(setq muse-html-encoding-default 'utf-8)
(setq muse-html-charset-default "utf-8") 

(add-hook 'muse-mode-hook #'(lambda ()
                             (set-buffer-file-coding-system 'utf-8))) 

(setq muse-html-meta-content-type "text/html; charset=utf-8")

(setq muse-html-header "~/emacs/muse/common/templates/header.html")
(setq muse-html-footer "~/emacs/muse/common/templates/footer.html")

(setq muse-project-alist
      `(
	("Home" 
	 ("~/emacs/muse/source/home"
	  :default "index")
	  ;:force-publish ("index"))
	 (:base "html" :path "~/emacs/muse/html/home"))
	("EmacsNotes"
	 ("~/emacs/muse/source/emacs"
	  :default "index")
	 (:base "html" :path "~/emacs/muse/html/emacs"))
	("Services"
	 ("~/emacs/muse/source/services"
	  :default "index")
	 (:base "html" :path "~/emacs/muse/html/services"))
	("CompLang"
	 (,@(muse-project-alist-dirs "~/emacs/muse/source/complang")
	  :default "index")
	 ,@(muse-project-alist-styles "~/emacs/muse/source/complang"
				      "~/emacs/muse/html/complang"
				      "html"))
	("StudyNotes"
	 (,@(muse-project-alist-dirs "~/emacs/muse/source/study")
	  :default "index")
	 ,@(muse-project-alist-styles "~/emacs/muse/source/study"
				      "~/emacs/muse/html/study"
				      "html"))
	
	("Document"
         ("~/coding/course/docs"
	  :default "index")
	 (:base "pdf" :path "~/coding/course/docs"))

	;; ("Wiki" (,@(muse-project-alist-dirs "~/emacs/muse/source")
	;; 	 :default "index"
	;; 	 )
	;;  ,@(muse-project-alist-styles "~/emacs/muse/source/study"
	;; 			      "~/emacs/muse/html/study"
	;; 			      "blosxom"))
	))


(defvar my-muse-publish-directory "~/emacs/muse/html/")

(defun ywb-muse-relative-path (file)
  (concat
   (file-relative-name
    my-muse-publish-directory
    (file-name-directory muse-publishing-current-output-path))
   file))

(setq muse-latex-footer "\\footnote{\\emph{This document was generated by \\href{http://mwolson.org/projects/EmacsMuse.html}{Emacs Muse}}.} \n \\end{document}")

;; ;;;_+ insert toplink in html files
;; (defun ywb/muse-publish-markup-heading ()
;;    (let* ((len (length (match-string 1)))
;;           (start (muse-markup-text
;;                   (cond ((= len 1) 'section)
;;                         ((= len 2) 'subsection)
;;                         ((= len 3) 'subsubsection)
;;                         (t 'section-other))
;;                   len))
;;           (end   (muse-markup-text
;;                   (cond ((= len 1) 'section-end)
;;                         ((= len 2) 'subsection-end)
;;                         ((= len 3) 'subsubsection-end)
;;                         (t 'section-other-end))
;;                   len)))
;;      (delete-region (match-beginning 0) (match-end 0))
;;      (muse-insert-markup start)
;;      (insert
;;       (propertize
;;       "<span class=\"toplink\"><a href=\"#top\">top</a></span>"
;;       'rear-nonsticky '(read-only) 'read-only t))
;;      (end-of-line)
;;      (when end
;;        (muse-insert-markup end))
;;      (muse-publish-section-close len)))
;; (defalias 'muse-publish-markup-heading 'ywb/muse-publish-markup-heading)
